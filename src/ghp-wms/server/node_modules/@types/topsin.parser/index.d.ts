import * as TopSinError from "topsin.error";
declare class TopSinDataParser {
    /**
     * 解析Ini格式文件;
     *
     * @param iFile Ini文件路径
     * @returns 返回Map结构对象
     */
    parseIniFile(iFile:string):Map<string,string>;

    /**
     * 解析CSV字符串;
     * 
     * @param iStr CSV字符串
     * @param oErr 错误消息引用
     * @returns 返回解析后的Array<Array<string>>
     */
    parseCsvStr(iStr:string, oErr?:TopSinError):Array<Array<string>>;

    /**
     * 将StringList转为CSV;
     * 
     * @param iList 字符串列表
     * @returns 返回CSV字符串
     */
    strList2Csv(iList:Array<string>):string;

    /**
     * 解析XML字符串;
     * 
     * @param iXmlStr XML字符串
     * @param iArrayFlags 需强制转为Array的标签列表,默认为空
     * @param iRootFlag 根标签,默认为空
     * @param iTextDomFlag 用于存放文本标签的KEY,默认为_DOM_TEXT_
     * @param iOptions 其它控制选项;预留使用
     * @returns 返回解析后的数据,可能为数组或Map
     */
    parseXmlStr(iXmlStr:string, iArrayFlags?:Array<string>, iRootFlag?:string, iTextDomFlag?:string, iOptions?:Map<String,String>):object;

    /**
     * 捕捉字符串中的${somekey}型式的变量;
     * 
     * @param iStr 字符串
     * @returns 返回捕捉的变量列表 
     */
    capDollarVar(iStr:string):Array<string>;

    /**
     * 替换字符串中的${somekey}变量;
     * 
     * @param iStr 字符串
     * @param iValues 替换值Map
     * @returns 返回替换后的字符串
     */
    replaceDollarVar(iStr:string, iValues:Map<string,string>):string;

    /**
     * 将字符串转为base64;
     * 
     * @param iStr 字符串
     * @returns 返回base64格式
     */
    encodeBase64(iStr:string):string;

    /**
     * 将base64格式转为字符串;
     * 
     * @param iBase64Str base64格式字符
     * @returns 返回字符串 
     */
    decodeBase64(iBase64Str:string):string;

    /**
     * 对一个字符串做XML格式的字符转义;
     * 
     * @param iStr 原始字符串
     * @returns 返回转义后的字符串
     */
    escapeXml(iStr:string):string;
}

export = new TopSinDataParser();
