
#服务主机地址，0.0.0.0表示从此主机的任何可用IP地址均可访问;
httpserver.host = 0.0.0.0

#服务端口
httpserver.port = 9008

#服务启用的线程数, 最佳设置为与当前CPU核数一致
httpserver.threadcount = 8

#服务超时时间(单位为秒), 如果连接在指定的时间内没有完成传输, 则服务端会主动断开连接;
#文件传输时指单次在指定时间内没有完成httpserver.maxbufsize的数据时才会断开连接;
httpserver.timeout = 3600

# POST请求能够被接受的大小上限，即content-length的上限
# 可选单位 KB, MB, GB，值必须大于0
httpserver.maxuploadsize = 1GB

# 非上传POST请求最大content-length，也是上传的缓存大小
httpserver.maxpostsize = 64KB

#文件临时存放路径,${APP_BIN_PATH}代表服务exe程序所在的目录
httpserver.tempdir = ${APP_ROOT_PATH}/temp

#需权限认证访问的列表
httpserver.access_control.storage = ${APP_ROOT_PATH}/config/tophttpserver.access_control.conf

#授权认证方式,access_token|api_key|oauth|oauth2;目录仅支持 access_token
httpserver.auth.mode = access_token

#access_token存放目录,目前仅支持本地文件存储;后续进行SQLITE,REDIS,或其它数据库;
httpserver.auth.access_token.storage = file://${APP_ROOT_PATH}/accesstoken

#路由plugin的存放目录,${APP_BIN_PATH}代表服务exe程序所在的目录
httpserver.router.plugindir = ${APP_ROOT_PATH}/library/httpserver-router

#路由配置文件
httpserver.router.config = ${APP_ROOT_PATH}/config/tophttpserver.router.conf

#数据存储路径
httpserver.file.storage = ${APP_ROOT_PATH}/data

##日志配置
##format example:{TIME} [{TYPE}]-({CATEGORY}):{MSG} <{THREAD}>@{FILE}:{LINE}/{FUNC}
logger 
{
    appender.console 
    {
        type = console
        typefilter = ERROR,WARN,FATAL,INFO
        categoryfilter = *
        format = {TIME} [{TYPE}] {FILE}:{LINE} - {MSG}
    }

    appender.errorfile 
    {
        type = rollingfile
        typefilter = ERROR,WARN,FATAL
        categoryfilter = *
        intervaltype = daily
        filename = ${APP_ROOT_PATH}/log/tophttpserver.log
        maxfilesize = 20048
        maxfilecount = 20
        format = {TIME} [{TYPE}] {FILE}:{LINE} - {MSG}
    }
}
